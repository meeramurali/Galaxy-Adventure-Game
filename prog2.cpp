//Filename: prog2.cpp

//Name:     Meera Murali
//Email:    mmurali@pdx.edu
//Class:    202
//Program:  2
//Date:     07/21/2017

//This program uses the 'galaxy' class to simulate a galaxy of
//solar systems, each of which contain a set of planets. The names of 
//the suns and planets are read in from an external data file. Other information
//such as planet size, distance from sun and number of moons are randomly 
//generated by member functions of the 'planet' class. 
//Based on these random values, a planet is determined to be habitable or not. 

//Two types of planets have been implemented:
//TERRESTRIAL planets - Allow landing since they have solid surfaces, have zero or few
//moons, a smaller range of size (radius), and closer to the sun
//GAS planets - Do not allow landing since they are gaseous, have a large number of
//moons, larger range of size (radius), amd further away from the sun

//The goal is to find a habitable planet which has an optimum distance from sun, and
//an atmosphere (based on its size)



#include "galaxy.h"



//Constants
const char FILENAME[] = "galaxy.txt";       //Filename to load data from
const int TOT_SOL_SYS = 2;                  //To allocate galaxy array
const int FUEL_FULL = 500;                  //Initial fuel value



//Prototypes
void display_menu(char & choice);   //Displays textbased menu and reads user choice
void get_data(char * & dest);       //Gets data from the user and sizes
                                    //the argument array just right

//main function
int main()
{
    char menu_choice = 'a';  //user choice for menu operation
    int num_loaded = 0;      //Number of solar systems loaded from file
    int total_planets = 0;   //Total number of planets in galaxy
    int total_sol_sys = 0;   //Total solar systems in galaxy
    int total_hab = 0;       //total habitable planets in galaxy
    spaceship explorer(FUEL_FULL, TOT_SOL_SYS);     //Spaceship object
    int f_lvl = FUEL_FULL;                          //current fuel value
    char * sol_sys_choice = NULL;                   //To read in user selection for solar system to visit
    int result = -7;                     //result of explore operation
    bool game_over = false;              //flag if out of fuel or habitable planet found

    //Load galaxy
    num_loaded = explorer.load_file(FILENAME);
    if (num_loaded)
        cout << "\n*** " << num_loaded << " solar system(s) loaded from file: " 
             << FILENAME << " ***" <<  endl;
    else
        cout << "\n*** File not found! ***" << endl;

    //Intro message
    cout << "\n\n\n*******************************************************************************"
         << "*******************************************************************************\n"
         << "Welcome! Your spaceship is ready for take off." << endl << endl
         << "The goal is to find a habitable terrestrial planet before you run out of fuel." << endl
         << "You can select a solar system to visit (operation 'a') and explore each of the planets"
         << " in the current solar system (operation 'b')." << endl
         << "Remember that each time you visit a planet, you use up fuel (Visiting a gas planet" 
         << " uses up more fuel \nthan a terrestrial planet, since gas planets are larger in size"
         << " and have more number of moons, and hence have a greater gravitational pull.)" << endl
         << "Good Luck!!" << endl
         << "*******************************************************************************"
         << "*******************************************************************************\n\n\n";
    
    //Repeat until user wants to quit, i.e. menu choice is 'e' 
    do 
    {  
        //Display menu and get user choice 
        display_menu(menu_choice);
        
        //If choice is 'a', change solar system
        //Prompt user accordingly based on result
        if (menu_choice == 'a')
        {
            cout << "\n\nAvailable solar systems: " << endl;

            //Display all solar systems
            if (explorer.display_all_suns())
            {
                //Read in choice
                cout << "Select destination solar system - Enter a sun name (e.g. Sirius): ";
                get_data(sol_sys_choice);
     
                //Set solar system
                if (explorer.select_solar_sys(sol_sys_choice) == 1)
                {
                    cout << "\n*** Travelling to selected solar system.... ***" << endl;
                    cout << ".\n.\n.\n*** Reached destination! ***" << endl;
                }

                else
                    cout << "\n*** No match found! ***" << endl;
            }
            
            else
                cout << "\n*** No solar systems loaded! ***" << endl;

            //Delete temporary variable
            if (sol_sys_choice)
            {
                delete [] sol_sys_choice;
                sol_sys_choice = NULL;
            }

            //Reset result
            result = -7;
        }
        
        //If choice is 'b', explore planet in current solar system
        //Prompt user accordingly based on result
        else if (menu_choice == 'b')
        {
            //Explore a planet
            //Prompt user based on result for each case
            cout << "\n\nPlanets in current solar system: " << endl;
            result = explorer.explore_a_planet(f_lvl);

            if (result > 0)
            {
                cout << "\n*** Travelling to selected planet.... ***" << endl;
                cout << ".\n.\n.\n*** Reached destination! ***" << endl;
            }

            if (result == -6)
                cout << "*** No existing solar systems ***" << endl;

            else if (result == -5)
                cout << "*** Solar system not set - You need to first travel to a solar system! Select operation (a) ***" << endl;

            else if (result == -4)
            {
                cout << "*** Out of fuel!! Game over!! ***" << endl;
                game_over = true;
            }

            else if (result == 0)
                cout << "*** No match found ***" << endl;

            else if (result == 1)
                cout << "*** Unable to land spaceship; Its a gas planet!! ***" << endl;

            else if (result == 2)
                cout << "*** Landed spaceship! Its a terrestrial planet but not habitable!! ***" << endl;

            else if (result == 3)
            {
                cout << "*** Landed spaceship ***" << endl
                     << "*** Success!! You have found a habitable terrestrial planet!! ***" << endl;
                
                game_over = true;
            }

            //Display current fuel level
            //Flag as Game over if no fuel left
            if (f_lvl > 0)
                cout << "Current fuel level: " << f_lvl << endl << endl;

            else
            {
                cout << "\n\n*** Out of fuel! Game over! ***" << endl;
            
                game_over = true;
            }
            
            //Reset result
            result = -7;
        } 
        
        //If choice is 'c', display all solar systems
        //Prompt user accordingly based on result
        else if (menu_choice == 'c')
        {
            //Display all solar systems
            total_planets = explorer.display_all(total_sol_sys);
            cout << endl << total_sol_sys << " solar systems!";  
            cout << endl << total_planets << " planets total!" << endl << endl;  
        }
        
        //If choice is 'd', display all habitable planets
        //Prompt user accordingly based on result
        else if (menu_choice == 'd')
        {
            //Display all habitable planets
            total_hab = explorer.display_all_hab_planets();
            cout << endl << total_hab << " habitable planets total!" << endl << endl;  
        }
    }
    while (menu_choice != 'e' && !game_over); //Stop if choice is 'e' or game over (no fuel)

    return 0;
}



//Display menu and get user choice
//INPUT: 1 argument: user choice (char array passed by reference)
//OUTPUT: Argument userchoice modified
void display_menu(char & choice)
{
    //Repeat until user chooses a valid menu option
    do
    {
        //Display menu of operations to user
        cout << "\n\nSelect operation:" << endl;
        cout << "a. Travel to a different solar system" << endl
             << "b. Explore current solar system" << endl
             << "c. Cheat code: Display galaxy" << endl
             << "d. Cheat code: Display all habitable planets" << endl
             << "e. Quit" << endl
             << "Enter a letter from 'a' to 'e': ";

        //Read in user response
        cin >> choice;
        cin.ignore(100, '\n');

        //Convert to lowercase
        choice = tolower(choice);
        
        //If choice is invalid, prompt user
        if (!(choice >= 'a' && choice <= 'e'))
            cout << "\n\n***Invalid entry! Try again...***" << endl;
    }
    while (!(choice >= 'a' && choice <= 'e'));

    return;
}



//Gets data from the user and sizes the argument array just right
//INPUT: 1 argument: a char pointer passed by reference
//OUTPUT: modified argument array, return nothing
void get_data(char * & dest)
{
    char temp [100];    //Temporary array to read in data and size
                        //argument array just right

    //Read in data from user into temp
    cin.get(temp, 100, '\n');
    cin.ignore(100, '\n');

    //Allocate memory sized just right, based on contents of temp
    dest = new char [strlen(temp) + 1];

    //Copy data from temp
    strcpy(dest, temp);

    return;
}
